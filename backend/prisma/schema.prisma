// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Reaction {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  pin    Pin    @relation(fields: [pinId], references: [id])
  pinId  Int

  @@unique([userId, pinId]) // prevent duplicate reactions
}

model User {
  id        String     @id @default(uuid()) // primary key with auto generated UUID
  email     String     @unique
  password  String
  name      String?
  createdAt DateTime   @default(now())
  Reaction  Reaction[]
  pins      Pin[]
  comments  Comment[]
  savedPins SavedPin[]
}

model Pin {
  id          Int      @id @default(autoincrement())
  title       String
  imageUrl    String
  description String?
  createdAt   DateTime @default(now())
  author   User   @relation(fields: [authorId], references: [id])
  authorId String
  reactions Reaction[]
  comments  Comment[]
  tags      String[]
  savedBy SavedPin[]
}

model Comment {
  id        Int       @id @default(autoincrement())
  user      User @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  pin       Pin  @relation(fields: [pinId], references: [id])
  pinId     Int
  content   String

  @@unique([userId, pinId]) // prevent duplicate Comments
}
model SavedPin {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  pin       Pin      @relation(fields: [pinId], references: [id])
  pinId     Int
  savedAt   DateTime @default(now())

  @@unique([userId, pinId])
}
