// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Reaction {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  pin    Pin    @relation(fields: [pinId], references: [id])
  pinId  Int

  @@unique([userId, pinId]) // prevent duplicate reactions
}

model User {
  id        String     @id @default(uuid()) // primary key with auto generated UUID
  email     String     @unique
  password  String
  name      String?
  createdAt DateTime   @default(now())
  Reaction  Reaction[]
  pins      Pin[]      @relation("CreatedPins")
  comments  Comment[]
  board     Board?     @relation("UserBoard")
}

model Pin {
  id                 Int     @id @default(autoincrement())
  title              String?
  description        String?
  link               String?
  altText            String?
  imageUrl           String
  isAllowedtoComment Boolean @default(true)
  showSimilarProduct Boolean @default(true)

  author    User     @relation("CreatedPins", fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())

  boardId Int?
  board   Board? @relation(fields: [boardId], references: [id])

  relatedProducts Pin[]      @relation("RelatedPins")
  relatedToPins   Pin[]      @relation("RelatedPins")
  tags            Tag[]      @relation("PinTags")
  //savedBy             SavedPin[] 
  reactions       Reaction[]
  comments        Comment[]
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique
  pins Pin[]  @relation("PinTags")
}

model Board {
  id     Int    @id @default(autoincrement())
  name   String
  userId String @unique
  user   User   @relation(name: "UserBoard", fields: [userId], references: [id])

  pins Pin[] // A board can have many pins
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  pin       Pin      @relation(fields: [pinId], references: [id])
  pinId     Int
  content   String

  @@unique([userId, pinId]) // prevent duplicate Comments
}
